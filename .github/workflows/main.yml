name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18.x'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npx lerna run build --stream

      - name: Run linting (if available)
        run: |
          if [ -f "package.json" ] && grep -q "lint" package.json; then
            npm run lint
          else
            echo "No linting script found, skipping..."
          fi
        continue-on-error: true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
        react-version: ['18', '19']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Run tests for React ${{ matrix.react-version }}
        run: npm run test
        continue-on-error: ${{ matrix.react-version == '19' }}

      - name: Run tests with coverage
        run: npm run test:coverage
        if: matrix.node-version == '18.x' && matrix.react-version == '18'
        continue-on-error: true

  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist/
            packages/*/lib/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "High severity vulnerabilities found!"
            npm audit --audit-level=high
            exit 1
          else
            echo "No high severity vulnerabilities found."
          fi

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build, security-audit]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish packages
        run: |
          npx lerna publish from-package --yes --no-verify-access
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release notes
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });

            console.log(`Published release: ${release.tag_name}`);
            console.log(`Release notes: ${release.body}`);

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [publish]
    if: always() && (needs.publish.result == 'success' || needs.build.result == 'success')
    steps:
      - name: Notify success
        run: |
          if [ "${{ needs.publish.result }}" == "success" ]; then
            echo "✅ Successfully published packages to NPM!"
          else
            echo "✅ Build completed successfully!"
          fi
