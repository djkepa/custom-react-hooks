name: Release Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta
          - rc

env:
  NODE_VERSION: '18.x'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build packages
        run: npm run build

      - name: Version bump
        id: version
        run: |
          if [ "${{ github.event.inputs.version_type }}" == "prerelease" ]; then
            NEW_VERSION=$(npx lerna version ${{ github.event.inputs.version_type }} --preid=${{ github.event.inputs.prerelease_tag }} --no-push --no-git-tag-version --yes | grep "lerna success" | tail -1 | sed 's/.*=> //')
          else
            NEW_VERSION=$(npx lerna version ${{ github.event.inputs.version_type }} --no-push --no-git-tag-version --yes | grep "lerna success" | tail -1 | sed 's/.*=> //')
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation - you can replace with conventional-changelog or similar
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          CHANGELOG="## What's Changed\n\n$COMMITS"
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version changes
        run: |
          git add .
          git commit -m "chore: release version ${{ steps.version.outputs.new_version }}" || echo "No changes to commit"

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release version ${{ steps.version.outputs.new_version }}"
          git push origin main --tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ github.event.inputs.version_type == 'prerelease' }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release]
    if: success()
    steps:
      - name: Notify success
        run: |
          echo "ðŸŽ‰ Successfully created release!"
          echo "The packages will be automatically published to NPM when the release is published."
